Resources:
  lambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: ${file(serverless.${self:provider.stage}.yml):vpc}
      GroupDescription: Allow outbound to postgres
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 65535
          IpProtocol: "-1"

  lambdaSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt lambdaSecurityGroup.GroupId
      DestinationSecurityGroupId: !Ref postgresSecurityGroup
      IpProtocol: "-1"

  postgresSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: ${file(serverless.${self:provider.stage}.yml):vpc}
      GroupDescription: Allow inbound from lambda
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref lambdaSecurityGroup
          IpProtocol: "-1"

  secretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: com.amazonaws.us-east-1.secretsmanager
      VpcId: ${file(serverless.${self:provider.stage}.yml):vpc}
      VpcEndpointType: Interface
      SubnetIds: ${file(serverless.${self:provider.stage}.yml):subnets}
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt vpcEndpointSecurityGroup.GroupId

  vpcEndpointSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: ${file(serverless.${self:provider.stage}.yml):vpc}
      GroupDescription: "Security group for VPC Endpoint"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !GetAtt lambdaSecurityGroup.GroupId
